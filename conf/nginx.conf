
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

	# lua_code_cache off; # 生产开启
    lua_shared_dict share_transfer_space 10m;
    lua_shared_dict share_inventory 1m;

    server {
        listen       8080;
        charset utf-8;

        location / {
            content_by_lua_block {
            	local cjson = require("cjson")
            	local runner = require("smart-restaurant/runner")

				local uri = ngx.var.uri
				local args, err = ngx.req.get_uri_args()
				if(uri=="/") then
            		runner:run(20) -- 运行20个盘空间的transfer
				else
					if(uri=="/set") then
						runner:set(args['i'],args['v'])
					end
					if(uri=="/get") then
						local value = runner:get(args['i'])
						if type(value) == "table" then
							ngx.say(cjson(value))
						else
							ngx.say(value)
						end
					end
                    if uri=="/status" then
                        ngx.say(cjson.encode(runner:status()))
                    end
					ngx.say(uri,",args:", cjson.encode(args))
				end
                ngx.say("transfer_space:", ngx.shared.share_transfer_space:get("share_transfer_space"))
            }
        }
    }

	server {
		listen       8081;
        charset utf-8;

        location / {
            content_by_lua_block {
            	local cjson = require("cjson")
            	local Server = require("smart-restaurant/server")

            	local server = Server:new()
                -- 注册
            	server:register("backend", 1)
            	server:register("frontend", 1)

                local uri = ngx.var.uri
				local args, err = ngx.req.get_uri_args()
				if(uri=="/") then
                    -- 消费者下单
                    local ingres = {"小白菜", "黄花菜", "鱼豆腐", "牛肉", "羊肉"}
                    -- 模拟服务端接收ingres
                    server:recv(ingres)
                else
                    ngx.log(ngx.INFO, "-+-+-+-+>>>>>>>> args:", cjson.encode(args))
                    if(uri=="/notify") then
                        if type(args["ingres"])=="table" then
                            server:notify(args["target"], args["id"], args["ingres"])
                        else
                            server:notify(args["target"], args["id"], cjson.decode(args["ingres"]))
                        end
                    end
                    if(uri=="/complete") then
                        server:complete(args["id"], args["ingre"])
                    end

                    if uri=="/status" then
                        ngx.say(cjson.encode(server:status()))
                    end
                end

            	ngx.say(cjson.encode(server.ingredients:get()))

            }
        }
	}

	server {
		listen       8082;
        charset utf-8;

        location / {
            content_by_lua_block {
            	local cjson = require("cjson")
            	local Backend = require("smart-restaurant/backend")
            	local Terminal = require("smart-restaurant/terminal")
            	local Control = require("smart-restaurant/control")

            	local backend = Backend:new(nil, "backend1")
                -- 一个backend可以挂多个terminal_control
                backend:register(Terminal:new(nil, 1), Control:new(nil, 1))
            	backend:register(Terminal:new(nil, 2), Control:new(nil, 2))
                backend:register(Terminal:new(nil, 3), Control:new(nil, 3))

                local uri = ngx.var.uri
				local args, err = ngx.req.get_uri_args()

                if(uri=="/recv" ) then
                    ngx.log(ngx.INFO, "recv:", cjson.encode(args))
                    backend:recv(args["ingres"])
                    backend:watch()
                end
                if(uri=="/complete") then
                    backend:complete(args["ingre"])            	
                end

                if uri=="/status" then
                    ngx.say(cjson.encode(backend:status()))
                end
            }
        }
	}

	 server {
	 	listen       8083;
         charset utf-8;

         location / {
             content_by_lua_block {
             	local cjson = require("cjson")
             	
                local Frontend = require("smart-restaurant/frontend")
             	local Terminal = require("smart-restaurant/terminal")
             	local Control = require("smart-restaurant/control")

             	local frontend = Frontend:new(nil, 1)

	 			local terminal1 = Terminal:new(nil, 6)
             	frontend:register("terminal", terminal1)
             	local control1 = Control:new(nil, 6)
             	frontend:register("control", control1)
                
                local uri = ngx.var.uri
                local args, err = ngx.req.get_uri_args()
                ngx.log(ngx.INFO, "+++++++++>>>>>>>> uri:", uri, ", args:", cjson.encode(args))
                
                if uri=="/" then
                    frontend:watch()
                end

                if uri=="/recv" then
                    frontend:recv(args["ingres"])
                end

                if uri=="/status" then
                    ngx.say(cjson.encode(frontend:status()))
                end

             }
         }
	 }

}
